generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String            @unique
  email     String            @unique
  name      String?
  avatar    String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  communities Community[]       @relation("CommunityOwner")
  memberships CommunityMember[]
  ratings     Rating[]
  messages    Message[]
}

model Community {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  category    String       // Cabang olahraga
  name        String       // Nama komunitas
  city        String       // Kota
  description String       // Deskripsi komunitas
  avatar      String?      // Avatar komunitas (Cloudinary URL)
  privacy     Privacy      @default(open)
  rating      Float        @default(0) // Rating komunitas (initial 0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  activityTags String[]    @default([])
  
  // owner
  userId String @db.ObjectId
  user   User   @relation("CommunityOwner", fields: [userId], references: [id])

  // relasi tambahan
  ratings     Rating[]
  socialMedia SocialMedia?
  memberships CommunityMember[]
  messages    Message[]
}

// relasi social media
model SocialMedia {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  communityId String?    @unique @db.ObjectId
  instagram   String?
  facebook    String?
  tiktok      String?
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade)
}

enum Privacy {
  open
  closed
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  value     Int      // nilai rating (misalnya 1â€“5)
  comment   String?  // komentar user (opsional)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  communityId String @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, communityId]) // user hanya bisa memberi 1 rating untuk 1 komunitas
}

model CommunityMember {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  communityId String     @db.ObjectId

 user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
 community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  role        MemberRole @default(member)
  joinedAt    DateTime   @default(now())

  @@unique([userId, communityId])
}

enum MemberRole {
  owner
  admin
  member
}

model Message {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  createdAt   DateTime   @default(now())

  // siapa yang kirim
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  // ke komunitas mana
  communityId String    @db.ObjectId
  community   Community @relation(fields: [communityId], references: [id])
}

